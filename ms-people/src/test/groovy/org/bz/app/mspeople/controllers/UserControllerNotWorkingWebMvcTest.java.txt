package org.bz.app.mspeople.controllers;

import org.bz.app.mspeople.security.components.filters.TokenAuthenticationFilter;
import org.bz.app.mspeople.security.entities.AuthoritySecurity;
import org.bz.app.mspeople.security.services.TokenService;
import org.bz.app.mspeople.components.validations.UserPasswordValidator;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@ExtendWith(SpringExtension.class)
@WebMvcTest(UserController.class)
class UserControllerNotWorkingWebMvcTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private UserController userController;

    //@MockBean
    //private UserService userService;
    @MockBean
    private UserPasswordValidator userPasswordValidator;
    @MockBean
    private TokenService tokenService;
    @MockBean
    private TokenAuthenticationFilter tokenAuthenticationFilter;

    @MockBean
    private SecurityFilterChain securityFilterChain;


    @BeforeEach
    void setUp() {
        mockMvc = MockMvcBuilders
                .standaloneSetup(userController)
                //.apply(springSecurity())
                .build();
    }

    @WithMockUser(authorities = {"READ_ALL"})
    @Test
    void list_using_Authority() throws Exception {
        MockHttpServletRequestBuilder param = (MockHttpServletRequestBuilder) MockMvcRequestBuilders
                .get("/api/users");

        mockMvc.perform(param.contentType(MediaType.APPLICATION_JSON))
                .andDo(print())
                .andExpect(status().isOk());
    }

    @WithMockUser(username = "user")
    @Test
    void list_using_Username_with_wrong_ROLE() throws Exception {

        SecurityContext context = SecurityContextHolder.createEmptyContext();
        UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken("user",
                null, getUserRole());
        context.setAuthentication(authenticationToken);
        SecurityContextHolder.setContext(context);


        MockHttpServletRequestBuilder param = (MockHttpServletRequestBuilder) MockMvcRequestBuilders
                .get("/api/users");

        mockMvc.perform(param.contentType(MediaType.APPLICATION_JSON))
                .andDo(print())
                .andExpect(status().isForbidden());
    }

    @Test
    void list_Forbidden() throws Exception {
        MockHttpServletRequestBuilder param = (MockHttpServletRequestBuilder) MockMvcRequestBuilders
                .get("/api/users");

        mockMvc.perform(param.contentType(MediaType.APPLICATION_JSON))
                .andDo(print())
                .andExpect(status().isForbidden());
    }

    @Test
    void view() {
    }

    @Test
    void create() {
    }

    @Test
    void edit() {
    }

    @Test
    void delete_with_Authorization_and_ROLE() throws Exception {
        SecurityContext context = SecurityContextHolder.createEmptyContext();
        UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken("user",
                null, getUserRole());
        context.setAuthentication(authenticationToken);
        SecurityContextHolder.setContext(context);

        UUID id = UUID.randomUUID();

        MockHttpServletRequestBuilder param = (MockHttpServletRequestBuilder) MockMvcRequestBuilders
                .delete("/api/users/" + id)
                //.with(jwt().authorities(new SimpleGrantedAuthority("DELETE_ALL")))
                //.header(HttpHeaders.AUTHORIZATION, authorization)
                ;

        mockMvc.perform(param)
                .andDo(print())
                .andExpect(status().is(HttpStatus.NO_CONTENT.value()));
    }


    private Set<GrantedAuthority> getEmptyAuthorities() {
        return Set.of();
    }

    private Set<GrantedAuthority> getAdminRole() {
        return Stream.of("ROLE_ADMIN").map(a -> AuthoritySecurity.builder().authority(a).build())
                .collect(Collectors.toSet());
    }

    private Set<GrantedAuthority> getUserRole() {
        return Stream.of("ROLE_USER").map(a -> AuthoritySecurity.builder().authority(a).build())
                .collect(Collectors.toSet());
    }

    private Set<GrantedAuthority> getReadAuthorities() {
        return Stream.of("READ_ALL", "READ_SELF").map(a -> AuthoritySecurity.builder().authority(a).build())
                .collect(Collectors.toSet());
    }
}